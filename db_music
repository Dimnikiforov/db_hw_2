CREATE TABLE IF NOT EXISTS Artist (
id SERIAL PRIMARY KEY,
name varchar(120) NOT NULL
);

CREATE TABLE IF NOT EXISTS Genre (
id SERIAL PRIMARY KEY,
name VARCHAR(40) NOT NULL
);

CREATE TABLE IF NOT EXISTS ArtistGenre (
artist_id integer REFERENCES artist(id),
genre_id integer REFERENCES genre(id),
CONSTRAINT ag PRIMARY KEY (artist_id, genre_id)
);

CREATE TABLE IF NOT EXISTS Albums (
id SERIAL PRIMARY KEY,
name VARCHAR (120) NOT NULL,
released DATE NOT NULL
);

CREATE TABLE IF NOT EXISTS ArtistAlbums (
artist_id integer REFERENCES artist(id),
albums_id integer REFERENCES albums(id),
CONSTRAINT aa PRIMARY KEY (artist_id, albums_id)
);

CREATE TABLE IF NOT EXISTS Track (
id SERIAL PRIMARY KEY,
name VARCHAR (120) NOT NULL,
lenght NUMERIC,
albums_id integer REFERENCES albums(id)
);

CREATE TABLE IF NOT EXISTS Collection (
id SERIAL PRIMARY KEY,
name varchar (120) NOT NULL,
released DATE NOT NULL 
);

CREATE TABLE IF NOT EXISTS CollectionTrack (
collection_id integer REFERENCES collection(id),
track_id integer REFERENCES track(id),
CONSTRAINT ct PRIMARY KEY (collection_id, track_id)
);

INSERT INTO artist (name)
VALUES 
  ('Radiohead'),
  ('Placebo'),
  ('5nizza'),
  ('Океан Эльзы'),
  ('СБПЧ'),
  ('Заточка'),
  ('Макулатура'),
  ('hehehe');

INSERT INTO genre (name)
VALUES
  ('rock'),
  ('pop'),
  ('brit-pop'),
  ('rap'),
  ('alternative rock');

INSERT INTO artistgenre (artist_id, genre_id)
VALUES 
  (1, 3),
  (1, 3),
  (2, 4),
  (4, 2),
  (5, 5),
  (6, 1),
  (7, 5),
  (8, 4),
  (9, 3);

INSERT INTO albums  (name, released)
VALUES 
  ('Ok computer', '1997-05-21'),
  ('Пролог', '2014-02-14'),
  ('КУ', '2017-02-15'),
  ('Земля', '2013-05-15'),
  ('Корюшка EP', '2023-01-11');

INSERT INTO artistalbums  (artist_id, albums_id)
VALUES 
  (1, 1),
  (1, 1),
  (2, 2),
  (4, 3),
  (5, 4),
  (6, 5),
  (7, 6),
  (8, 7),
  (9, 8);

INSERT INTO track (name, lenght, albums_id)
VALUES 
  ('Paranoid Android', 5, 1),
  ('Karma Police', 5.5, 1),
  ('No Surprices', 6.5, 1),
  ('смерть героя', 3, 2),
  ('счастье', 2.5, 2),
  ('Meds', 3.5, 3),
  ('Infra-red', 4, 3),
  ('счастье', 2.5, 2),
  ('самоле', 2.5, 4),
  ('Митя', 2.5, 4),
  ('обыйми', 2.5, 5),
  ('Гимн неудачников', 5, 6),
  ('С чего ты взял', 4, 6),
  ('Этажи', 4, 7),
  ('Не на ту', 3, 7),
  ('Корюшка', 3, 8),;
  
INSERT INTO collection  (name, released)
VALUES 
  ('Rock', '2000-01-01'),
  ('Рок', '2010-01-01'),
  ('реп', '2022-01-01'),
  ('GB', '2010-01-01'),
  ('vol.1', '2000-01-01'),
  ('лучше уже не будет', '2022-01-01'),
  ('лучше уже не будет.2', '2023-01-01'),
  ('неизданное', '2022-01-01'),
  ('то, на что ты откладывал деньги', '2010-01-01');

INSERT INTO collectiontrack (track_id, collection_id)
VALUES 
  (1, 3),
  (1, 4),
  (3, 1),
  (8, 2),
  (15, 5),
  (12, 6),
  (10, 7),
  (9, 8),
  (11, 9);

SELECT name, released FROM albums a
WHERE released BETWEEN  '2018-01-01' AND '2018-12-31'

SELECT name, lenght FROM track t 
WHERE lenght = (SELECT max(lenght) FROM track )

SELECT name, lenght FROM track t 
WHERE lenght >= 3.5

SELECT name FROM collection c  
WHERE released BETWEEN  '2018-01-01' AND '2020-12-31'

SELECT name FROM artist a 
WHERE name like '%'

SELECT name FROM track t 
WHERE name LIKE '%мой%'

SELECT name FROM track t 
WHERE name LIKE '%my%'

SELECT name, count(*) FROM genre g 
JOIN artistgenre a ON a.artist_id = g.id 
GROUP BY name

SELECT count(albums_id)  FROM track t 
LEFT JOIN albums a  ON  t.albums_id  = a.id 
WHERE a.released BETWEEN '2017-01-01' AND '2023-12-31'

SELECT a.name,  avg(lenght)  FROM albums a 
JOIN track t ON a.id = t.albums_id
GROUP BY a.name

SELECT a.name FROM artist a 
JOIN artistalbums a2 ON a.id = a2.artist_id 
JOIN albums a3 ON a2.albums_id = a3.id 
WHERE released NOT IN  ('2020-01-01', '2020-12-31')

SELECT c.name FROM collection c 
JOIN collectiontrack c2 ON c.id = c2.collection_id 
JOIN track t ON c2.track_id = t.id 
JOIN albums a ON t.albums_id = a.id 
JOIN artistalbums a2 ON a.id = a2.albums_id 
JOIN artist a3 ON a2.artist_id =a3.id 
WHERE a3.name = 'Radiohead'

SELECT a.name FROM albums a 
JOIN artistalbums a2 ON a.id = a2.albums_id 
JOIN artist a3 ON a2.artist_id = a3.id 
JOIN artistgenre a4 ON a3.id = a4.genre_id 
GROUP BY a.name
HAVING count(*) > 1

SELECT t.name FROM track t 
LEFT JOIN collectiontrack c ON t.id = c.track_id 
WHERE c.collection_id IS  NULL 

SELECT a.name  FROM artist a 
JOIN artistalbums a2 ON a.id = a2.artist_id 
JOIN albums a3 ON a2.albums_id = a3.id 
JOIN track t ON a3.id = t.albums_id 
WHERE lenght = (SELECT min(lenght) FROM track)

SELECT a.name FROM albums a 
JOIN track t ON a.id = t.albums_id 
GROUP BY a."name"  
HAVING  count(t.name) = 1
